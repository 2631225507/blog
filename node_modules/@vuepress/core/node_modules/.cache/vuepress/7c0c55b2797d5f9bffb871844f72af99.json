{"remainingRequest":"/Applications/personal-note/blog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/personal-note/blog/docs/.vuepress/components/one-multiple-tree-select.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Applications/personal-note/blog/docs/.vuepress/components/one-multiple-tree-select.vue","mtime":1668579349514},{"path":"/Applications/personal-note/blog/node_modules/cache-loader/dist/cjs.js","mtime":1667818948286},{"path":"/Applications/personal-note/blog/node_modules/babel-loader/lib/index.js","mtime":1667818948295},{"path":"/Applications/personal-note/blog/node_modules/cache-loader/dist/cjs.js","mtime":1667818948286},{"path":"/Applications/personal-note/blog/node_modules/vue-loader/lib/index.js","mtime":1668421637991}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["one-multiple-tree-select.vue"],"names":[],"mappings":";AAmfile":"one-multiple-tree-select.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<template>\n  <el-select\n    v-model=\"multipleSelectTreeVal\"\n    clearable\n    collapse-tags\n    multiple\n    :disabled=\"disabled\"\n    popper-class=\"select-tree-popper\"\n    @clear=\"selectTreeClearHandle\"\n    @remove-tag=\"removeSelectTreeTag\"\n  >\n    <!-- 参数：\n            current-node-key：当前选中节点\n            default-checked-keys：默认勾选的节点的 key 的数组\n            default-expanded-keys：默认展开的节点的 key 的数组\n         -->\n    <el-option :value=\"multipleSelectTreeKey\">\n      <el-tree\n        ref=\"multipleSelectTree\"\n        :check-strictly=\"checkStrictly\"\n        :current-node-key=\"multipleSelectTreeKey\"\n        :default-checked-keys=\"selectTreeDefaultSelectedKeys\"\n        :default-expanded-keys=\"selectTreeDefaultSelectedKeys\"\n        :data=\"options\"\n        highlight-current\n        :props=\"props\"\n        :node-key=\"props.value\"\n        show-checkbox\n        @check=\"multipleSelectTreeCheckNode\"\n      ></el-tree>\n    </el-option>\n  </el-select>\n</template>\n\n<script>\nexport default {\n  name: 'el-multipleTree-select',\n  props: {\n    // 配置项\n    props: {\n      type: Object,\n      default: () => {\n        return {\n          value: 'id', // ID字段名\n          label: 'title', // 显示名称\n          children: 'children', // 子级字段名\n        }\n      },\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    // 选项列表数据(树形结构的对象数组)\n    options: {\n      type: Array,\n      default: () => {\n        return []\n      },\n    },\n    // 初始值\n    value: {\n      type: String,\n      default: '',\n    },\n    // 是否单选\n    checkStrictly: {\n      type: Boolean,\n      default: true,\n    },\n    // 是否开启子级联父\n    childCascade: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * type控制父子级间的关联，默认1\n     * 前提是需要将checkStrictly置为true，childCascade为true才能完全生效\n     * 1:父联动子，而子不联动父，\n     * 2:子联动父，父不联动子 (选中时不联动，取消选中时可以联动)\n     */\n    type: {\n      type: String,\n      default: '1',\n    },\n  },\n  data() {\n    return {\n      singleSelectTreeKey: '',  // 多选\n      multipleSelectTreeVal: [], // 多选树默认label值\n      multipleSelectTreeKey: '', // 多选树默认key值\n      selectTreeDefaultSelectedKeys: [], // 默认展开的key值数组\n    }\n  },\n  methods: {\n    // 初始化单选树的值\n    async initSingleTree() {\n      this.singleSelectTreeKey = this.value\n      if (this.singleSelectTreeKey && this.options.length > 0) {\n        this.$nextTick(() => {\n          this.selectTreeDefaultSelectedKeys = this.singleSelectTreeKey\n            ? this.singleSelectTreeKey.split(',')\n            : [] // 设置默认展开\n          let keyArr = []\n          let valueArr = []\n          if (this.singleSelectTreeKey) {\n            this.singleSelectTreeKey.split(',').forEach((item) => {\n              let tdata = this.$refs.multipleSelectTree.getNode(item).data\n              keyArr.push(tdata.unitId)\n              valueArr.push(tdata.name)\n            })\n          }\n          this.multipleSelectTreeVal = valueArr\n          this.multipleSelectTreeKey = keyArr.join(',')\n          this.$emit('getValue', this.multipleSelectTreeKey)\n          // 多选树\n          this.$refs.multipleSelectTree.setCheckedKeys(\n            this.selectTreeDefaultSelectedKeys\n          )\n        })\n      }\n    },\n    // 清除树选中\n    selectTreeClearHandle() {\n      this.selectTreeDefaultSelectedKeys = []\n      this.clearSelected()\n      // 清空\n      this.multipleSelectTreeVal = []\n      this.multipleSelectTreeKey = ''\n      this.$refs.multipleSelectTree.setCheckedKeys([])\n      this.$emit('getValue', this.multipleSelectTreeKey)\n    },\n    /* 清空选中样式 */\n    clearSelected() {\n      const allNode = document.querySelectorAll(\n        '#singleSelectTree .el-tree-node'\n      )\n      allNode.forEach((element) => element.classList.remove('is-current'))\n    },\n    // select多选时移除某项操作\n    removeSelectTreeTag(val) {\n      const stack = JSON.parse(JSON.stringify(this.options))\n      while (stack.length) {\n        const curr = stack.shift()\n        if (curr.name == val) {\n          this.$refs.multipleSelectTree.setChecked(curr.unitId, false)\n          let temporaryId = this.multipleSelectTreeKey.split(',')\n          temporaryId.forEach((item, tindex) => {\n            if (item == curr.unitId) {\n              temporaryId.splice(tindex, 1)\n            }\n          })\n          this.multipleSelectTreeKey = temporaryId.join(',')\n        }\n        if (curr.children && curr.children.length) {\n          stack.unshift(...curr.children)\n        }\n      }\n      this.$emit('getValue', this.multipleSelectTreeKey)\n    },\n    // 节点选中操作\n    multipleSelectTreeCheckNode(node, store) {\n      // 取消级联及开启子节点级联\n      if (this.checkStrictly && this.childCascade && this.type == '2') {\n        let key = this.props.value\n        let target = node[key]\n        // 判断当前节点是选中还是取消选中\n        if (store.checkedKeys.indexOf(target) === -1) {\n          this.cancelChildChecked(node)\n          return\n        }\n        let result = this\n          .treeFindPath(this.options, (data) => data[key] === target)\n          .map((item) => {\n            return item[key]\n          })\n        let currentKeys = this.$refs.multipleSelectTree.getCheckedKeys()\n        this.$refs.multipleSelectTree.setCheckedKeys([\n          ...result,\n          ...currentKeys,\n        ])\n      } else if (this.checkStrictly && this.childCascade && this.type == '1') {\n        this.clickDeal(node, store)\n      }\n      // 进行数据回填\n      const checkedNodes = this.$refs.multipleSelectTree.getCheckedNodes()\n      const keyArr = []\n      const valueArr = []\n      checkedNodes.forEach((item) => {\n        keyArr.push(item.unitId)\n        valueArr.push(item.name)\n      })\n      this.multipleSelectTreeVal = valueArr\n      this.multipleSelectTreeKey = keyArr.join(',')\n      this.$emit('getValue', this.multipleSelectTreeKey)\n    },\n\n    clickDeal(currentObj, treeStatus) {\n      // 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。\n      let selected = treeStatus.checkedKeys.indexOf(currentObj.unitId) // -1未选中\n      // 选中\n      if (selected !== -1) {\n        // 子节点只要被选中父节点就被选中\n        // this.selectedParent(currentObj)\n        // 统一处理子节点为相同的勾选状态\n        this.uniteChildSame(currentObj, true)\n      } else {\n        // 未选中 处理子节点全部为未选中\n        if (currentObj.children && currentObj.children.length) {\n          this.uniteChildSame(currentObj, false)\n        }\n      }\n    },\n    uniteChildSame(treeList, isSelected) {\n      this.$refs.multipleSelectTree.setChecked(treeList.unitId, isSelected)\n      if (treeList.children) {\n        for (let i = 0; i < treeList.children.length; i++) {\n          this.uniteChildSame(treeList.children[i], isSelected)\n        }\n      }\n    },\n    selectedParent(currentObj) {\n      let currentNode = this.$refs.multipleSelectTree.getNode(currentObj)\n      if (currentNode.parent.key !== undefined) {\n        this.$refs.multipleSelectTree.setChecked(currentNode.parent, true)\n        this.selectedParent(currentNode.parent)\n      }\n    },\n    /**\n     * 取消节点下所有子节点的选中状态\n     */\n    cancelChildChecked(node) {\n      let childKey = []\n      this.findChildren(node, childKey)\n      let currentKeys = this.$refs.multipleSelectTree.getCheckedKeys()\n      childKey.forEach((item) => {\n        let index = currentKeys.indexOf(item)\n        if (index > -1) {\n          currentKeys.splice(index, 1)\n        }\n      })\n      this.$refs.multipleSelectTree.setCheckedKeys(currentKeys)\n    },\n    /**\n     * 根据条件获取父级节点\n     */\n    treeFindPath(tree, func, path = []) {\n      if (!tree) return []\n      for (const data of tree) {\n        // 这里按照你的需求来存放最后返回的内容吧\n        path.push(data)\n        if (func(data)) return path\n        if (data.children) {\n          const findChildren = this.treeFindPath(data.children, func, path)\n          if (findChildren.length) return findChildren\n        }\n        path.pop()\n      }\n      return []\n    },\n    /**\n     * 递归获取所有的子节点\n     */\n    findChildren(node, childKey = [], children = 'children', keyName) {\n      let key = keyName || this.nodeKey\n      if (node[children] && node[children].length) {\n        node[children].forEach((item) => {\n          childKey.push(item[key])\n          this.findChildren(item, childKey, children, keyName)\n        })\n      }\n    },\n  },\n  watch: {\n    options() {\n      this.$nextTick(() => {\n        // 初始化多选树\n        this.initSingleTree()\n      })\n    },\n    value() {\n      this.initSingleTree()\n    },\n  },\n}\n</script>\n\n<style  lang=\"scss\">\n/* 下拉树样式-----------开始 */\n.select-tree-popper {\n  .el-scrollbar {\n    .el-scrollbar__view {\n      .el-select-dropdown__item {\n        height: auto;\n        max-height: 274px;\n        padding: 0px;\n        overflow-y: auto;\n        line-height: 26px;\n      }\n    }\n  }\n}\n</style>\n"]}]}