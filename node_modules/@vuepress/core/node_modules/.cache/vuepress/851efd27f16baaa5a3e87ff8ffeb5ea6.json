{"remainingRequest":"/Applications/personal-note/blog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/personal-note/blog/docs/.vuepress/components/one-tree-select.vue?vue&type=style&index=0&id=1cf613df&prod&scoped=true&lang=css&","dependencies":[{"path":"/Applications/personal-note/blog/docs/.vuepress/components/one-tree-select.vue","mtime":1668505835654},{"path":"/Applications/personal-note/blog/node_modules/css-loader/dist/cjs.js","mtime":1667818948511},{"path":"/Applications/personal-note/blog/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668421637991},{"path":"/Applications/personal-note/blog/node_modules/postcss-loader/src/index.js","mtime":1667818948911},{"path":"/Applications/personal-note/blog/node_modules/cache-loader/dist/cjs.js","mtime":1667818948286},{"path":"/Applications/personal-note/blog/node_modules/vue-loader/lib/index.js","mtime":1668421637991}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lbC1zY3JvbGxiYXIgLmVsLXNjcm9sbGJhcl9fdmlldyAuZWwtc2VsZWN0LWRyb3Bkb3duX19pdGVtIHsKICBoZWlnaHQ6IGF1dG87CiAgbWF4LWhlaWdodDogMjc0cHg7CiAgcGFkZGluZzogMDsKICBvdmVyZmxvdzogaGlkZGVuOwogIG92ZXJmbG93LXk6IGF1dG87Cn0KLmVsLXNlbGVjdC1kcm9wZG93bl9faXRlbS5zZWxlY3RlZCB7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKfQp1bCBsaSA+Pj4gLmVsLXRyZWUgLmVsLXRyZWUtbm9kZV9fY29udGVudCB7CiAgaGVpZ2h0OiBhdXRvOwogIHBhZGRpbmc6IDAgMjBweDsKfQouZWwtdHJlZS1ub2RlX19sYWJlbCB7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKfQouZWwtdHJlZSA+Pj4gLmlzLWN1cnJlbnQgLmVsLXRyZWUtbm9kZV9fbGFiZWwgewogIGNvbG9yOiAjNDA5ZWZmOwogIGZvbnQtd2VpZ2h0OiA3MDA7Cn0KLmVsLXRyZWUgPj4+IC5pcy1jdXJyZW50IC5lbC10cmVlLW5vZGVfX2NoaWxkcmVuIC5lbC10cmVlLW5vZGVfX2xhYmVsIHsKICBjb2xvcjogIzYwNjI2NjsKICBmb250LXdlaWdodDogbm9ybWFsOwp9Cg=="},{"version":3,"sources":["one-tree-select.vue"],"names":[],"mappings":";AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"one-tree-select.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<template>\n  <el-select\n    ref=\"elSelect\"\n    :value=\"valueTitle\"\n    :disabled=\"disabled\"\n    :clearable=\"clearable\"\n    :placeholder=\"placeholder\"\n    @clear=\"clearHandle\"\n  >\n    <el-option :value=\"valueTitle\" :label=\"valueTitle\" class=\"options\">\n      <el-tree\n        id=\"tree-option\"\n        ref=\"selectTree\"\n        :props=\"props\"\n        :data=\"options\"\n        :accordion=\"accordion\"\n        :node-key=\"props.value\"\n        :default-expanded-keys=\"defaultExpandedKey\"\n        @node-click=\"handleNodeClick\"\n      >\n      </el-tree>\n    </el-option>\n  </el-select>\n</template>\n\n<script>\nexport default {\n  name: 'one-tree-select',\n  props: {\n    // 配置项\n    props: {\n      type: Object,\n      default: () => {\n        return {\n          value: 'id', // ID字段名\n          label: 'label', // 显示名称\n          children: 'children', // 子级字段名\n        }\n      },\n    },\n    // 选项列表数据(树形结构的对象数组)\n    options: {\n      type: Array,\n      default: () => {\n        return []\n      },\n    },\n    // 下拉初始值\n    value: {\n      type: String,\n      default: '',\n    },\n    // 可清空选项\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    // 占位符号\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    // 是否收起\n    accordion: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      valueTitle: '', // 下拉框显示名称\n      valueId: null, // 初始Id\n      defaultExpandedKey: [], // 默认展开节点数组\n    }\n  },\n  mounted() {\n    this.valueId = this.value, // 初始值\n    this.initHandle()\n  },\n  methods: {\n    // 初始化\n    initHandle() {\n      this.valueId = this.value\n      if (this.valueId && this.options.length > 0) {\n        this.$nextTick(function () {\n          this.valueTitle = this.$refs.selectTree.getNode(this.valueId).data[this.props.label] // 初始化显示label\n          this.$refs.selectTree.setCurrentKey(this.valueId) // 设置默认选中\n          this.defaultExpandedKey = [this.valueId] // 设置默认展开\n          this.$emit('getValue',this.$refs.selectTree.getNode(this.valueId).data)\n        })\n      }\n      this.initScroll()\n    },\n\n    // 初始化滚动条\n    initScroll() {\n      this.$nextTick(() => {\n        let scrollWrap = document.querySelectorAll('.el-scrollbar .el-select-dropdown__wrap')[0]\n        let scrollBar = document.querySelectorAll('.el-scrollbar .el-scrollbar__bar')\n        scrollWrap.style.cssText = 'margin: 0px; max-height: none; overflow: hidden;'\n        scrollBar.forEach((el) => (el.style.width = 0))\n      })\n    },\n    // 切换选项\n    handleNodeClick(node) {\n      this.valueTitle = node[this.props.label] // 设置label\n      this.valueId = node[this.props.id] // 设置id\n      this.defaultExpandedKey = []\n      this.$emit('getValue', node)\n      this.$refs.elSelect.visible = false\n    },\n    // 清除选中\n    clearHandle() {\n      this.valueTitle = ''\n      this.valueId = null\n      this.defaultExpandedKey = []\n      this.clearSelected()\n      this.$emit('getValue', null)\n    },\n    // 清空选中样式\n    clearSelected() {\n      let allNode = document.querySelectorAll('#tree-option .el-tree-node')\n      allNode.forEach((element) => element.classList.remove('is-current'))\n    },\n  },\n  watch: {\n    options() {\n      this.valueId = this.value\n      this.initHandle()\n    },\n  },\n}\n</script>\n<style scoped>\n.el-scrollbar .el-scrollbar__view .el-select-dropdown__item {\n  height: auto;\n  max-height: 274px;\n  padding: 0;\n  overflow: hidden;\n  overflow-y: auto;\n}\n.el-select-dropdown__item.selected {\n  font-weight: normal;\n}\nul li >>> .el-tree .el-tree-node__content {\n  height: auto;\n  padding: 0 20px;\n}\n.el-tree-node__label {\n  font-weight: normal;\n}\n.el-tree >>> .is-current .el-tree-node__label {\n  color: #409eff;\n  font-weight: 700;\n}\n.el-tree >>> .is-current .el-tree-node__children .el-tree-node__label {\n  color: #606266;\n  font-weight: normal;\n}\n</style>"]}]}